// Code generated by hertz generator.

package course

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	course "github.com/yiwen101/SkyScholarBackend/biz/model/course"
)

// GetCourseProgress .
// @router progress [GET]
func GetCourseProgress(ctx context.Context, c *app.RequestContext) {

	resp := new(course.TreeNode)

	c.JSON(consts.StatusOK, resp)
}

// ResetCourseProgress .
// @router progress [DELETE]
func ResetCourseProgress(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.TreeNode
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(int64)

	c.JSON(consts.StatusOK, resp)
}

// UpdateCourseProgress .
// @router progress [PUT]
func UpdateCourseProgress(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.TreeNode
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(int64)

	c.JSON(consts.StatusOK, resp)
}

// GetCoursePlan .
// @router plan [GET]
func GetCoursePlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.TreeNode)

	c.JSON(consts.StatusOK, resp)
}

// GetCoursePlanIds .
// @router plan/ids [GET]
func GetCoursePlanIds(ctx context.Context, c *app.RequestContext) {

	resp := new([]int64)

	c.JSON(consts.StatusOK, resp)
}

// CreateCoursePlan .
// @router plan [POST]
func CreateCoursePlan(ctx context.Context, c *app.RequestContext) {

	resp := new(int64)

	c.JSON(consts.StatusOK, resp)
}

// UpdateCoursePlan .
// @router plan [PUT]
func UpdateCoursePlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.TreeNode
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(int64)

	c.JSON(consts.StatusOK, resp)
}

// DeleteCoursePlan .
// @router plan [DELETE]
func DeleteCoursePlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req int64
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(int64)

	c.JSON(consts.StatusOK, resp)
}
